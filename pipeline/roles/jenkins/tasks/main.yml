- name: Adding Apt Key For Jenkins
  become: yes
  apt_key:
    url: "https://jenkins-ci.org/debian/jenkins-ci.org.key"
    state: present
    validate_certs: no

- name: Check For Jenkins List    
  stat: path=/etc/apt/sources.list.d/jenkins.list
  register: jenkins_list

- name: Adding Jenkins Source List
  become: yes
  lineinfile:
    path: /etc/apt/sources.list.d/jenkins.list
    line: deb http://pkg.jenkins.io/debian-stable binary/
    create: yes
  when: not jenkins_list.stat.exists

- name: Installing Jenkins
  become: yes
  apt:
    name: jenkins     
    state: present
    update_cache: yes
  register: jenkins_install

- name: Replace a localhost entry with our own
  become: yes
  lineinfile:
    path: /etc/default/jenkins
    regexp: 'HTTP_PORT=8080'
    line: HTTP_PORT=9000
    owner: root
    group: root
    mode: '0644'

- name: Restarting Jenkins
  become: yes
  service:
    name: jenkins
    state: restarted
  when: jenkins_install.changed

- name: Turn off Jenkins setup wizard
  become: yes
  lineinfile:
    dest: /etc/default/jenkins
    regexp: '^JAVA_ARGS='
    line: 'JAVA_ARGS="-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false -Dhudson.security.csrf.DefaultCrumbIssuer.EXCLUDE_SESSION_ID=true"'
    insertbefore: '^DAEMON_ARGS='

- name: "Wait For Jenkins To Come Up"
  uri:
    url: "{{jenkins_url}}"
    status_code: 403
  register: result
  until: result.status == 403
  retries: 10
  delay: 15
  when: jenkins_install.changed

- name: Creating Directory For Groovy Script - Jenkins
  become: true
  file:
    path: "{{jenkins_path}}/init.groovy.d"
    state: directory
    mode: 0755
    owner: jenkins

- name: Copying Groovy Script For Deafult Jenkins User Creation
  become: true
  template:
    force: yes
    src: "templates/jenkins_script.groovy"
    dest: "{{jenkins_path}}/init.groovy.d/basic-security.groovy"
    mode: 0755
    owner: jenkins
  register: groovy_dir

- name: Restarting Jenkins
  become: yes
  service:
    name: jenkins
    state: restarted
  when: groovy_dir.changed

- name: "Wait For Jenkins To Come Up"
  uri:
    url: "{{jenkins_url}}/cli/"
    status_code: 403
  register: result
  until: result.status == 403
  retries: 10
  delay: 15
  when: groovy_dir.changed

- name: Removing Groovy Script
  become: true
  become_user: jenkins
  file:
    path: "{{jenkins_path}}/init.groovy.d/basic-security.groovy"
    state: absent

- name: Restarting Jenkins
  become: yes
  service:
    name: jenkins
    state: restarted
  when: groovy_dir.changed

- name: "Wait For Jenkins To Come Up"
  uri:
    url: "{{jenkins_url}}/cli/"
    status_code: 403
  register: result
  until: result.status == 403
  retries: 10
  delay: 15
  when: groovy_dir.changed

- name: Install pipeline plugins
  become: yes 
  jenkins_plugin:
    name: "{{ item }}"
    url_username: "{{jenkins_user}}"
    url_password: "{{jenkins_password}}"
    url: "{{jenkins_url}}"
    state: latest
  with_items:
    - build-pipeline-plugin
    - workflow-aggregator
    - job-dsl
    - git
    - ws-cleanup
    - build-publisher
    - credentials
  register: jenkins_plugin
  ignore_errors: true

- name: Restarting Jenkins
  become: yes
  service:
    name: jenkins
    state: restarted
  when: jenkins_plugin.changed

- name: Check For Jenkins jobs configuration file 
  stat: path=/home/vagrant/jenkins_jobs.ini
  register: jenkins_jobs

- name: Copy the jenkins job configuration file to the jenkins-srv
  template:
     src: jenkins_jobs.ini
     dest: ~/jenkins_jobs.ini
  when: not jenkins_jobs.stat.exists
  
- name: Installing python3-pip
  become: yes
  apt: 
     pkg: python3-pip
     state: latest 
     update_cache: yes 

- name: Installing jenkins-job-builder
  become: yes
  pip:
     name: jenkins-job-builder
     state: present

- name: Run shell command to check if password is already set in configuration file
  become: yes
  shell: cat /home/vagrant/jenkins_jobs.ini | grep password | wc -l
  register: present
 
- name: Get a valid crumb to use it for getting the Jenkins token
  uri:
     url: "{{ jenkins_url }}/crumbIssuer/api/json"
     user: "{{ jenkins_user }}"
     password: "{{ jenkins_password }}"
     method: GET
     force_basic_auth: yes
  register: out
  when: 'present.stdout == "0"'

- name: Generating API token for Jenkins to be used by jenkins jobs
  uri:
     url: "{{ jenkins_url }}/me/descriptorByName/jenkins.security.ApiTokenProperty/generateNewToken"
     user: "{{ jenkins_user }}"
     password: "{{ jenkins_password }}"
     method: POST
     force_basic_auth: yes
     body_format: json
     body:
        newTokenName: "DEVOPS"
     headers:
        Jenkins-Crumb: "{{ out.json.crumb }}"    
  register: token
  when: 'present.stdout == "0"'

- name: Set the password to the Token value generated
  become: yes
  lineinfile:
     path: /home/vagrant/jenkins_jobs.ini
     insertafter: '^url' 
     line: "password={{ token.json.data.tokenValue }}"
  when: 'present.stdout == "0"'

- name: Create a jobs folder
  file:
     path: ~/jobs
     state: directory  

- name: Add jenkins to sudoers group
  become: yes
  user:
    name: jenkins
    group: sudo

- name: Allow jenkins to have passwordless sudo
  become: yes
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^jenkins'
    line: 'jenkins ALL=(ALL) NOPASSWD: ALL'
    insertafter: EOF
    validate: visudo -cf %s

- name: Create credentials
  uri: 
    url: "{{ jenkins_url }}/credentials/store/system/domain/_/createCredentials"
    user: "{{ jenkins_user }}"
    password: "{{ jenkins_password }}"
    method: POST
    force_basic_auth: yes
    body: |
      json={
        "": "0",
        "credentials": {
          "scope": "GLOBAL",
          "id": "{{ item.credId }}",
          "username": "{{ item.username }}",
          "password": "{{ item.password }}",
          "description": "Password credentials",
          "$class": "com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl"
        }
      }
    headers:
      Jenkins-Crumb: "{{ out.json.crumb }}"
    status_code: 302
  ignore_errors: true
  with_items:
    - { credId: 'github', username: "{{ gh_user }}", password: "{{ gh_pass }}" }
    - { credId: 'gmail', username: "{{ from }}", password: "{{ gmail_pass }}"}
    - { credId: 'mysql', username: "root", password: "{{ mysql_pass }}"}
  no_log: true